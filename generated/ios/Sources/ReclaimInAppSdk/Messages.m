// Copyright 2025, Reclaim Protocol. Use of this source code is governed by a license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Messages.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation ReclaimApiVerificationExceptionTypeBox
- (instancetype)initWithValue:(ReclaimApiVerificationExceptionType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation ReclaimSessionStatusBox
- (instancetype)initWithValue:(ReclaimSessionStatus)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation ClaimCreationTypeApiBox
- (instancetype)initWithValue:(ClaimCreationTypeApi)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface ReclaimApiVerificationRequest ()
+ (ReclaimApiVerificationRequest *)fromList:(NSArray<id> *)list;
+ (nullable ReclaimApiVerificationRequest *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ReclaimApiVerificationException ()
+ (ReclaimApiVerificationException *)fromList:(NSArray<id> *)list;
+ (nullable ReclaimApiVerificationException *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ReclaimApiVerificationResponse ()
+ (ReclaimApiVerificationResponse *)fromList:(NSArray<id> *)list;
+ (nullable ReclaimApiVerificationResponse *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ClientProviderInformationOverride ()
+ (ClientProviderInformationOverride *)fromList:(NSArray<id> *)list;
+ (nullable ClientProviderInformationOverride *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ClientFeatureOverrides ()
+ (ClientFeatureOverrides *)fromList:(NSArray<id> *)list;
+ (nullable ClientFeatureOverrides *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ClientLogConsumerOverride ()
+ (ClientLogConsumerOverride *)fromList:(NSArray<id> *)list;
+ (nullable ClientLogConsumerOverride *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ClientReclaimSessionManagementOverride ()
+ (ClientReclaimSessionManagementOverride *)fromList:(NSArray<id> *)list;
+ (nullable ClientReclaimSessionManagementOverride *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ClientReclaimAppInfoOverride ()
+ (ClientReclaimAppInfoOverride *)fromList:(NSArray<id> *)list;
+ (nullable ClientReclaimAppInfoOverride *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ReclaimSessionIdentityUpdate ()
+ (ReclaimSessionIdentityUpdate *)fromList:(NSArray<id> *)list;
+ (nullable ReclaimSessionIdentityUpdate *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ReclaimApiVerificationOptions ()
+ (ReclaimApiVerificationOptions *)fromList:(NSArray<id> *)list;
+ (nullable ReclaimApiVerificationOptions *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ProviderVersionApi ()
+ (ProviderVersionApi *)fromList:(NSArray<id> *)list;
+ (nullable ProviderVersionApi *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SessionInitResponseApi ()
+ (SessionInitResponseApi *)fromList:(NSArray<id> *)list;
+ (nullable SessionInitResponseApi *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface LogEntryApi ()
+ (LogEntryApi *)fromList:(NSArray<id> *)list;
+ (nullable LogEntryApi *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation ReclaimApiVerificationRequest
+ (instancetype)makeWithAppId:(NSString *)appId
    providerId:(NSString *)providerId
    secret:(NSString *)secret
    signature:(NSString *)signature
    timestamp:(nullable NSString *)timestamp
    context:(NSString *)context
    sessionId:(NSString *)sessionId
    parameters:(NSDictionary<NSString *, NSString *> *)parameters
    providerVersion:(nullable ProviderVersionApi *)providerVersion {
  ReclaimApiVerificationRequest* pigeonResult = [[ReclaimApiVerificationRequest alloc] init];
  pigeonResult.appId = appId;
  pigeonResult.providerId = providerId;
  pigeonResult.secret = secret;
  pigeonResult.signature = signature;
  pigeonResult.timestamp = timestamp;
  pigeonResult.context = context;
  pigeonResult.sessionId = sessionId;
  pigeonResult.parameters = parameters;
  pigeonResult.providerVersion = providerVersion;
  return pigeonResult;
}
+ (ReclaimApiVerificationRequest *)fromList:(NSArray<id> *)list {
  ReclaimApiVerificationRequest *pigeonResult = [[ReclaimApiVerificationRequest alloc] init];
  pigeonResult.appId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.providerId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.secret = GetNullableObjectAtIndex(list, 2);
  pigeonResult.signature = GetNullableObjectAtIndex(list, 3);
  pigeonResult.timestamp = GetNullableObjectAtIndex(list, 4);
  pigeonResult.context = GetNullableObjectAtIndex(list, 5);
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 6);
  pigeonResult.parameters = GetNullableObjectAtIndex(list, 7);
  pigeonResult.providerVersion = GetNullableObjectAtIndex(list, 8);
  return pigeonResult;
}
+ (nullable ReclaimApiVerificationRequest *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ReclaimApiVerificationRequest fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.appId ?: [NSNull null],
    self.providerId ?: [NSNull null],
    self.secret ?: [NSNull null],
    self.signature ?: [NSNull null],
    self.timestamp ?: [NSNull null],
    self.context ?: [NSNull null],
    self.sessionId ?: [NSNull null],
    self.parameters ?: [NSNull null],
    self.providerVersion ?: [NSNull null],
  ];
}
@end

@implementation ReclaimApiVerificationException
+ (instancetype)makeWithMessage:(NSString *)message
    stackTraceAsString:(NSString *)stackTraceAsString
    type:(ReclaimApiVerificationExceptionType)type {
  ReclaimApiVerificationException* pigeonResult = [[ReclaimApiVerificationException alloc] init];
  pigeonResult.message = message;
  pigeonResult.stackTraceAsString = stackTraceAsString;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (ReclaimApiVerificationException *)fromList:(NSArray<id> *)list {
  ReclaimApiVerificationException *pigeonResult = [[ReclaimApiVerificationException alloc] init];
  pigeonResult.message = GetNullableObjectAtIndex(list, 0);
  pigeonResult.stackTraceAsString = GetNullableObjectAtIndex(list, 1);
  ReclaimApiVerificationExceptionTypeBox *boxedReclaimApiVerificationExceptionType = GetNullableObjectAtIndex(list, 2);
  pigeonResult.type = boxedReclaimApiVerificationExceptionType.value;
  return pigeonResult;
}
+ (nullable ReclaimApiVerificationException *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ReclaimApiVerificationException fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.message ?: [NSNull null],
    self.stackTraceAsString ?: [NSNull null],
    [[ReclaimApiVerificationExceptionTypeBox alloc] initWithValue:self.type],
  ];
}
@end

@implementation ReclaimApiVerificationResponse
+ (instancetype)makeWithSessionId:(NSString *)sessionId
    didSubmitManualVerification:(BOOL )didSubmitManualVerification
    proofs:(NSArray<NSDictionary<NSString *, dynamic *> *> *)proofs
    exception:(nullable ReclaimApiVerificationException *)exception {
  ReclaimApiVerificationResponse* pigeonResult = [[ReclaimApiVerificationResponse alloc] init];
  pigeonResult.sessionId = sessionId;
  pigeonResult.didSubmitManualVerification = didSubmitManualVerification;
  pigeonResult.proofs = proofs;
  pigeonResult.exception = exception;
  return pigeonResult;
}
+ (ReclaimApiVerificationResponse *)fromList:(NSArray<id> *)list {
  ReclaimApiVerificationResponse *pigeonResult = [[ReclaimApiVerificationResponse alloc] init];
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.didSubmitManualVerification = [GetNullableObjectAtIndex(list, 1) boolValue];
  pigeonResult.proofs = GetNullableObjectAtIndex(list, 2);
  pigeonResult.exception = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable ReclaimApiVerificationResponse *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ReclaimApiVerificationResponse fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.sessionId ?: [NSNull null],
    @(self.didSubmitManualVerification),
    self.proofs ?: [NSNull null],
    self.exception ?: [NSNull null],
  ];
}
@end

@implementation ClientProviderInformationOverride
+ (instancetype)makeWithProviderInformationUrl:(nullable NSString *)providerInformationUrl
    providerInformationJsonString:(nullable NSString *)providerInformationJsonString
    canFetchProviderInformationFromHost:(BOOL )canFetchProviderInformationFromHost {
  ClientProviderInformationOverride* pigeonResult = [[ClientProviderInformationOverride alloc] init];
  pigeonResult.providerInformationUrl = providerInformationUrl;
  pigeonResult.providerInformationJsonString = providerInformationJsonString;
  pigeonResult.canFetchProviderInformationFromHost = canFetchProviderInformationFromHost;
  return pigeonResult;
}
+ (ClientProviderInformationOverride *)fromList:(NSArray<id> *)list {
  ClientProviderInformationOverride *pigeonResult = [[ClientProviderInformationOverride alloc] init];
  pigeonResult.providerInformationUrl = GetNullableObjectAtIndex(list, 0);
  pigeonResult.providerInformationJsonString = GetNullableObjectAtIndex(list, 1);
  pigeonResult.canFetchProviderInformationFromHost = [GetNullableObjectAtIndex(list, 2) boolValue];
  return pigeonResult;
}
+ (nullable ClientProviderInformationOverride *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ClientProviderInformationOverride fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.providerInformationUrl ?: [NSNull null],
    self.providerInformationJsonString ?: [NSNull null],
    @(self.canFetchProviderInformationFromHost),
  ];
}
@end

@implementation ClientFeatureOverrides
+ (instancetype)makeWithCookiePersist:(nullable NSNumber *)cookiePersist
    singleReclaimRequest:(nullable NSNumber *)singleReclaimRequest
    idleTimeThresholdForManualVerificationTrigger:(nullable NSNumber *)idleTimeThresholdForManualVerificationTrigger
    sessionTimeoutForManualVerificationTrigger:(nullable NSNumber *)sessionTimeoutForManualVerificationTrigger
    attestorBrowserRpcUrl:(nullable NSString *)attestorBrowserRpcUrl
    isAIFlowEnabled:(nullable NSNumber *)isAIFlowEnabled
    manualReviewMessage:(nullable NSString *)manualReviewMessage
    loginPromptMessage:(nullable NSString *)loginPromptMessage {
  ClientFeatureOverrides* pigeonResult = [[ClientFeatureOverrides alloc] init];
  pigeonResult.cookiePersist = cookiePersist;
  pigeonResult.singleReclaimRequest = singleReclaimRequest;
  pigeonResult.idleTimeThresholdForManualVerificationTrigger = idleTimeThresholdForManualVerificationTrigger;
  pigeonResult.sessionTimeoutForManualVerificationTrigger = sessionTimeoutForManualVerificationTrigger;
  pigeonResult.attestorBrowserRpcUrl = attestorBrowserRpcUrl;
  pigeonResult.isAIFlowEnabled = isAIFlowEnabled;
  pigeonResult.manualReviewMessage = manualReviewMessage;
  pigeonResult.loginPromptMessage = loginPromptMessage;
  return pigeonResult;
}
+ (ClientFeatureOverrides *)fromList:(NSArray<id> *)list {
  ClientFeatureOverrides *pigeonResult = [[ClientFeatureOverrides alloc] init];
  pigeonResult.cookiePersist = GetNullableObjectAtIndex(list, 0);
  pigeonResult.singleReclaimRequest = GetNullableObjectAtIndex(list, 1);
  pigeonResult.idleTimeThresholdForManualVerificationTrigger = GetNullableObjectAtIndex(list, 2);
  pigeonResult.sessionTimeoutForManualVerificationTrigger = GetNullableObjectAtIndex(list, 3);
  pigeonResult.attestorBrowserRpcUrl = GetNullableObjectAtIndex(list, 4);
  pigeonResult.isAIFlowEnabled = GetNullableObjectAtIndex(list, 5);
  pigeonResult.manualReviewMessage = GetNullableObjectAtIndex(list, 6);
  pigeonResult.loginPromptMessage = GetNullableObjectAtIndex(list, 7);
  return pigeonResult;
}
+ (nullable ClientFeatureOverrides *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ClientFeatureOverrides fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.cookiePersist ?: [NSNull null],
    self.singleReclaimRequest ?: [NSNull null],
    self.idleTimeThresholdForManualVerificationTrigger ?: [NSNull null],
    self.sessionTimeoutForManualVerificationTrigger ?: [NSNull null],
    self.attestorBrowserRpcUrl ?: [NSNull null],
    self.isAIFlowEnabled ?: [NSNull null],
    self.manualReviewMessage ?: [NSNull null],
    self.loginPromptMessage ?: [NSNull null],
  ];
}
@end

@implementation ClientLogConsumerOverride
+ (instancetype)makeWithEnableLogHandler:(BOOL )enableLogHandler
    canSdkCollectTelemetry:(BOOL )canSdkCollectTelemetry
    canSdkPrintLogs:(nullable NSNumber *)canSdkPrintLogs {
  ClientLogConsumerOverride* pigeonResult = [[ClientLogConsumerOverride alloc] init];
  pigeonResult.enableLogHandler = enableLogHandler;
  pigeonResult.canSdkCollectTelemetry = canSdkCollectTelemetry;
  pigeonResult.canSdkPrintLogs = canSdkPrintLogs;
  return pigeonResult;
}
+ (ClientLogConsumerOverride *)fromList:(NSArray<id> *)list {
  ClientLogConsumerOverride *pigeonResult = [[ClientLogConsumerOverride alloc] init];
  pigeonResult.enableLogHandler = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.canSdkCollectTelemetry = [GetNullableObjectAtIndex(list, 1) boolValue];
  pigeonResult.canSdkPrintLogs = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable ClientLogConsumerOverride *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ClientLogConsumerOverride fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.enableLogHandler),
    @(self.canSdkCollectTelemetry),
    self.canSdkPrintLogs ?: [NSNull null],
  ];
}
@end

@implementation ClientReclaimSessionManagementOverride
+ (instancetype)makeWithEnableSdkSessionManagement:(BOOL )enableSdkSessionManagement {
  ClientReclaimSessionManagementOverride* pigeonResult = [[ClientReclaimSessionManagementOverride alloc] init];
  pigeonResult.enableSdkSessionManagement = enableSdkSessionManagement;
  return pigeonResult;
}
+ (ClientReclaimSessionManagementOverride *)fromList:(NSArray<id> *)list {
  ClientReclaimSessionManagementOverride *pigeonResult = [[ClientReclaimSessionManagementOverride alloc] init];
  pigeonResult.enableSdkSessionManagement = [GetNullableObjectAtIndex(list, 0) boolValue];
  return pigeonResult;
}
+ (nullable ClientReclaimSessionManagementOverride *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ClientReclaimSessionManagementOverride fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.enableSdkSessionManagement),
  ];
}
@end

@implementation ClientReclaimAppInfoOverride
+ (instancetype)makeWithAppName:(NSString *)appName
    appImageUrl:(NSString *)appImageUrl
    isRecurring:(BOOL )isRecurring {
  ClientReclaimAppInfoOverride* pigeonResult = [[ClientReclaimAppInfoOverride alloc] init];
  pigeonResult.appName = appName;
  pigeonResult.appImageUrl = appImageUrl;
  pigeonResult.isRecurring = isRecurring;
  return pigeonResult;
}
+ (ClientReclaimAppInfoOverride *)fromList:(NSArray<id> *)list {
  ClientReclaimAppInfoOverride *pigeonResult = [[ClientReclaimAppInfoOverride alloc] init];
  pigeonResult.appName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.appImageUrl = GetNullableObjectAtIndex(list, 1);
  pigeonResult.isRecurring = [GetNullableObjectAtIndex(list, 2) boolValue];
  return pigeonResult;
}
+ (nullable ClientReclaimAppInfoOverride *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ClientReclaimAppInfoOverride fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.appName ?: [NSNull null],
    self.appImageUrl ?: [NSNull null],
    @(self.isRecurring),
  ];
}
@end

@implementation ReclaimSessionIdentityUpdate
+ (instancetype)makeWithAppId:(NSString *)appId
    providerId:(NSString *)providerId
    sessionId:(NSString *)sessionId {
  ReclaimSessionIdentityUpdate* pigeonResult = [[ReclaimSessionIdentityUpdate alloc] init];
  pigeonResult.appId = appId;
  pigeonResult.providerId = providerId;
  pigeonResult.sessionId = sessionId;
  return pigeonResult;
}
+ (ReclaimSessionIdentityUpdate *)fromList:(NSArray<id> *)list {
  ReclaimSessionIdentityUpdate *pigeonResult = [[ReclaimSessionIdentityUpdate alloc] init];
  pigeonResult.appId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.providerId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable ReclaimSessionIdentityUpdate *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ReclaimSessionIdentityUpdate fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.appId ?: [NSNull null],
    self.providerId ?: [NSNull null],
    self.sessionId ?: [NSNull null],
  ];
}
@end

@implementation ReclaimApiVerificationOptions
+ (instancetype)makeWithCanDeleteCookiesBeforeVerificationStarts:(BOOL )canDeleteCookiesBeforeVerificationStarts
    canUseAttestorAuthenticationRequest:(BOOL )canUseAttestorAuthenticationRequest
    claimCreationType:(ClaimCreationTypeApi)claimCreationType
    canAutoSubmit:(BOOL )canAutoSubmit
    isCloseButtonVisible:(BOOL )isCloseButtonVisible {
  ReclaimApiVerificationOptions* pigeonResult = [[ReclaimApiVerificationOptions alloc] init];
  pigeonResult.canDeleteCookiesBeforeVerificationStarts = canDeleteCookiesBeforeVerificationStarts;
  pigeonResult.canUseAttestorAuthenticationRequest = canUseAttestorAuthenticationRequest;
  pigeonResult.claimCreationType = claimCreationType;
  pigeonResult.canAutoSubmit = canAutoSubmit;
  pigeonResult.isCloseButtonVisible = isCloseButtonVisible;
  return pigeonResult;
}
+ (ReclaimApiVerificationOptions *)fromList:(NSArray<id> *)list {
  ReclaimApiVerificationOptions *pigeonResult = [[ReclaimApiVerificationOptions alloc] init];
  pigeonResult.canDeleteCookiesBeforeVerificationStarts = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.canUseAttestorAuthenticationRequest = [GetNullableObjectAtIndex(list, 1) boolValue];
  ClaimCreationTypeApiBox *boxedClaimCreationTypeApi = GetNullableObjectAtIndex(list, 2);
  pigeonResult.claimCreationType = boxedClaimCreationTypeApi.value;
  pigeonResult.canAutoSubmit = [GetNullableObjectAtIndex(list, 3) boolValue];
  pigeonResult.isCloseButtonVisible = [GetNullableObjectAtIndex(list, 4) boolValue];
  return pigeonResult;
}
+ (nullable ReclaimApiVerificationOptions *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ReclaimApiVerificationOptions fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.canDeleteCookiesBeforeVerificationStarts),
    @(self.canUseAttestorAuthenticationRequest),
    [[ClaimCreationTypeApiBox alloc] initWithValue:self.claimCreationType],
    @(self.canAutoSubmit),
    @(self.isCloseButtonVisible),
  ];
}
@end

@implementation ProviderVersionApi
+ (instancetype)makeWithVersionExpression:(nullable NSString *)versionExpression
    resolvedVersion:(nullable NSString *)resolvedVersion {
  ProviderVersionApi* pigeonResult = [[ProviderVersionApi alloc] init];
  pigeonResult.versionExpression = versionExpression;
  pigeonResult.resolvedVersion = resolvedVersion;
  return pigeonResult;
}
+ (ProviderVersionApi *)fromList:(NSArray<id> *)list {
  ProviderVersionApi *pigeonResult = [[ProviderVersionApi alloc] init];
  pigeonResult.versionExpression = GetNullableObjectAtIndex(list, 0);
  pigeonResult.resolvedVersion = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable ProviderVersionApi *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ProviderVersionApi fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.versionExpression ?: [NSNull null],
    self.resolvedVersion ?: [NSNull null],
  ];
}
@end

@implementation SessionInitResponseApi
+ (instancetype)makeWithSessionId:(NSString *)sessionId
    resolvedProviderVersion:(nullable NSString *)resolvedProviderVersion {
  SessionInitResponseApi* pigeonResult = [[SessionInitResponseApi alloc] init];
  pigeonResult.sessionId = sessionId;
  pigeonResult.resolvedProviderVersion = resolvedProviderVersion;
  return pigeonResult;
}
+ (SessionInitResponseApi *)fromList:(NSArray<id> *)list {
  SessionInitResponseApi *pigeonResult = [[SessionInitResponseApi alloc] init];
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.resolvedProviderVersion = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable SessionInitResponseApi *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SessionInitResponseApi fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.sessionId ?: [NSNull null],
    self.resolvedProviderVersion ?: [NSNull null],
  ];
}
@end

@implementation LogEntryApi
+ (instancetype)makeWithSessionId:(nullable NSString *)sessionId
    message:(NSString *)message
    level:(NSInteger )level
    dateTimeIso:(NSString *)dateTimeIso
    source:(NSString *)source
    error:(nullable NSString *)error
    stackTraceAsString:(nullable NSString *)stackTraceAsString {
  LogEntryApi* pigeonResult = [[LogEntryApi alloc] init];
  pigeonResult.sessionId = sessionId;
  pigeonResult.message = message;
  pigeonResult.level = level;
  pigeonResult.dateTimeIso = dateTimeIso;
  pigeonResult.source = source;
  pigeonResult.error = error;
  pigeonResult.stackTraceAsString = stackTraceAsString;
  return pigeonResult;
}
+ (LogEntryApi *)fromList:(NSArray<id> *)list {
  LogEntryApi *pigeonResult = [[LogEntryApi alloc] init];
  pigeonResult.sessionId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  pigeonResult.level = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.dateTimeIso = GetNullableObjectAtIndex(list, 3);
  pigeonResult.source = GetNullableObjectAtIndex(list, 4);
  pigeonResult.error = GetNullableObjectAtIndex(list, 5);
  pigeonResult.stackTraceAsString = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable LogEntryApi *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [LogEntryApi fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.sessionId ?: [NSNull null],
    self.message ?: [NSNull null],
    @(self.level),
    self.dateTimeIso ?: [NSNull null],
    self.source ?: [NSNull null],
    self.error ?: [NSNull null],
    self.stackTraceAsString ?: [NSNull null],
  ];
}
@end

@interface nullMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation nullMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[ReclaimApiVerificationExceptionTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 130: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[ReclaimSessionStatusBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 131: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[ClaimCreationTypeApiBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 132: 
      return [ReclaimApiVerificationRequest fromList:[self readValue]];
    case 133: 
      return [ReclaimApiVerificationException fromList:[self readValue]];
    case 134: 
      return [ReclaimApiVerificationResponse fromList:[self readValue]];
    case 135: 
      return [ClientProviderInformationOverride fromList:[self readValue]];
    case 136: 
      return [ClientFeatureOverrides fromList:[self readValue]];
    case 137: 
      return [ClientLogConsumerOverride fromList:[self readValue]];
    case 138: 
      return [ClientReclaimSessionManagementOverride fromList:[self readValue]];
    case 139: 
      return [ClientReclaimAppInfoOverride fromList:[self readValue]];
    case 140: 
      return [ReclaimSessionIdentityUpdate fromList:[self readValue]];
    case 141: 
      return [ReclaimApiVerificationOptions fromList:[self readValue]];
    case 142: 
      return [ProviderVersionApi fromList:[self readValue]];
    case 143: 
      return [SessionInitResponseApi fromList:[self readValue]];
    case 144: 
      return [LogEntryApi fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ReclaimApiVerificationExceptionTypeBox class]]) {
    ReclaimApiVerificationExceptionTypeBox *box = (ReclaimApiVerificationExceptionTypeBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[ReclaimSessionStatusBox class]]) {
    ReclaimSessionStatusBox *box = (ReclaimSessionStatusBox *)value;
    [self writeByte:130];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[ClaimCreationTypeApiBox class]]) {
    ClaimCreationTypeApiBox *box = (ClaimCreationTypeApiBox *)value;
    [self writeByte:131];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[ReclaimApiVerificationRequest class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ReclaimApiVerificationException class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ReclaimApiVerificationResponse class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ClientProviderInformationOverride class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ClientFeatureOverrides class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ClientLogConsumerOverride class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ClientReclaimSessionManagementOverride class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ClientReclaimAppInfoOverride class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ReclaimSessionIdentityUpdate class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ReclaimApiVerificationOptions class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ProviderVersionApi class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SessionInitResponseApi class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LogEntryApi class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullMessagesPigeonCodecReaderWriter *readerWriter = [[nullMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
@interface ReclaimModuleApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation ReclaimModuleApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)startVerificationRequest:(ReclaimApiVerificationRequest *)arg_request completion:(void (^)(ReclaimApiVerificationResponse *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerification", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetMessagesCodec()];
  [channel sendMessage:@[arg_request ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        ReclaimApiVerificationResponse *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)startVerificationFromUrlUrl:(NSString *)arg_url completion:(void (^)(ReclaimApiVerificationResponse *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromUrl", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetMessagesCodec()];
  [channel sendMessage:@[arg_url ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        ReclaimApiVerificationResponse *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)startVerificationFromJsonTemplate:(NSDictionary<dynamic *, dynamic *> *)arg_template completion:(void (^)(ReclaimApiVerificationResponse *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromJson", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetMessagesCodec()];
  [channel sendMessage:@[arg_template ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        ReclaimApiVerificationResponse *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)setOverridesProvider:(nullable ClientProviderInformationOverride *)arg_provider feature:(nullable ClientFeatureOverrides *)arg_feature logConsumer:(nullable ClientLogConsumerOverride *)arg_logConsumer sessionManagement:(nullable ClientReclaimSessionManagementOverride *)arg_sessionManagement appInfo:(nullable ClientReclaimAppInfoOverride *)arg_appInfo capabilityAccessToken:(nullable NSString *)arg_capabilityAccessToken completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setOverrides", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetMessagesCodec()];
  [channel sendMessage:@[arg_provider ?: [NSNull null], arg_feature ?: [NSNull null], arg_logConsumer ?: [NSNull null], arg_sessionManagement ?: [NSNull null], arg_appInfo ?: [NSNull null], arg_capabilityAccessToken ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)clearAllOverridesWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.clearAllOverrides", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetMessagesCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)setVerificationOptionsOptions:(nullable ReclaimApiVerificationOptions *)arg_options completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setVerificationOptions", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetMessagesCodec()];
  [channel sendMessage:@[arg_options ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)sendLogEntry:(LogEntryApi *)arg_entry completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.sendLog", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetMessagesCodec()];
  [channel sendMessage:@[arg_entry ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)pingWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.ping", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetMessagesCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
@end

void SetUpReclaimHostOverridesApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReclaimHostOverridesApi> *api) {
  SetUpReclaimHostOverridesApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpReclaimHostOverridesApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReclaimHostOverridesApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.onLogs", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onLogsLogJsonString:completion:)], @"ReclaimHostOverridesApi api (%@) doesn't respond to @selector(onLogsLogJsonString:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_logJsonString = GetNullableObjectAtIndex(args, 0);
        [api onLogsLogJsonString:arg_logJsonString completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.createSession", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createSessionAppId:providerId:timestamp:signature:providerVersion:completion:)], @"ReclaimHostOverridesApi api (%@) doesn't respond to @selector(createSessionAppId:providerId:timestamp:signature:providerVersion:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_appId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_providerId = GetNullableObjectAtIndex(args, 1);
        NSString *arg_timestamp = GetNullableObjectAtIndex(args, 2);
        NSString *arg_signature = GetNullableObjectAtIndex(args, 3);
        NSString *arg_providerVersion = GetNullableObjectAtIndex(args, 4);
        [api createSessionAppId:arg_appId providerId:arg_providerId timestamp:arg_timestamp signature:arg_signature providerVersion:arg_providerVersion completion:^(SessionInitResponseApi *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.updateSession", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateSessionSessionId:status:completion:)], @"ReclaimHostOverridesApi api (%@) doesn't respond to @selector(updateSessionSessionId:status:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_sessionId = GetNullableObjectAtIndex(args, 0);
        ReclaimSessionStatusBox *boxedReclaimSessionStatus = GetNullableObjectAtIndex(args, 1);
        ReclaimSessionStatus arg_status = boxedReclaimSessionStatus.value;
        [api updateSessionSessionId:arg_sessionId status:arg_status completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.logSession", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logSessionAppId:providerId:sessionId:logType:metadata:completion:)], @"ReclaimHostOverridesApi api (%@) doesn't respond to @selector(logSessionAppId:providerId:sessionId:logType:metadata:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_appId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_providerId = GetNullableObjectAtIndex(args, 1);
        NSString *arg_sessionId = GetNullableObjectAtIndex(args, 2);
        NSString *arg_logType = GetNullableObjectAtIndex(args, 3);
        NSDictionary<NSString *, dynamic *> *arg_metadata = GetNullableObjectAtIndex(args, 4);
        [api logSessionAppId:arg_appId providerId:arg_providerId sessionId:arg_sessionId logType:arg_logType metadata:arg_metadata completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.onSessionIdentityUpdate", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onSessionIdentityUpdateUpdate:completion:)], @"ReclaimHostOverridesApi api (%@) doesn't respond to @selector(onSessionIdentityUpdateUpdate:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        ReclaimSessionIdentityUpdate *arg_update = GetNullableObjectAtIndex(args, 0);
        [api onSessionIdentityUpdateUpdate:arg_update completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.fetchProviderInformation", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchProviderInformationAppId:providerId:sessionId:signature:timestamp:resolvedVersion:completion:)], @"ReclaimHostOverridesApi api (%@) doesn't respond to @selector(fetchProviderInformationAppId:providerId:sessionId:signature:timestamp:resolvedVersion:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_appId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_providerId = GetNullableObjectAtIndex(args, 1);
        NSString *arg_sessionId = GetNullableObjectAtIndex(args, 2);
        NSString *arg_signature = GetNullableObjectAtIndex(args, 3);
        NSString *arg_timestamp = GetNullableObjectAtIndex(args, 4);
        NSString *arg_resolvedVersion = GetNullableObjectAtIndex(args, 5);
        [api fetchProviderInformationAppId:arg_appId providerId:arg_providerId sessionId:arg_sessionId signature:arg_signature timestamp:arg_timestamp resolvedVersion:arg_resolvedVersion completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpReclaimHostVerificationApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReclaimHostVerificationApi> *api) {
  SetUpReclaimHostVerificationApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpReclaimHostVerificationApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReclaimHostVerificationApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostVerificationApi.fetchAttestorAuthenticationRequest", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchAttestorAuthenticationRequestReclaimHttpProvider:completion:)], @"ReclaimHostVerificationApi api (%@) doesn't respond to @selector(fetchAttestorAuthenticationRequestReclaimHttpProvider:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSDictionary<dynamic *, dynamic *> *arg_reclaimHttpProvider = GetNullableObjectAtIndex(args, 0);
        [api fetchAttestorAuthenticationRequestReclaimHttpProvider:arg_reclaimHttpProvider completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
