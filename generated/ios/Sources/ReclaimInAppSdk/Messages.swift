// Copyright 2025, Reclaim Protocol. Use of this source code is governed by a license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v24.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

typealias MessagesBinaryMessenger = any FlutterBinaryMessenger

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ReclaimApiVerificationExceptionType: Int {
  case unknown = 0
  case sessionExpired = 1
  case verificationDismissed = 2
  case verificationFailed = 3
  case verificationCancelled = 4
}

enum ReclaimSessionStatus: Int {
  case uSERSTARTEDVERIFICATION = 0
  case uSERINITVERIFICATION = 1
  case pROOFGENERATIONSTARTED = 2
  case pROOFGENERATIONRETRY = 3
  case pROOFGENERATIONSUCCESS = 4
  case pROOFGENERATIONFAILED = 5
  case pROOFSUBMITTED = 6
  case pROOFSUBMISSIONFAILED = 7
  case pROOFMANUALVERIFICATIONSUBMITTED = 8
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationRequest {
  var appId: String
  var providerId: String
  var secret: String
  var signature: String
  var timestamp: String? = nil
  var context: String
  var sessionId: String
  var parameters: [String: String]
  var autoSubmit: Bool
  var acceptAiProviders: Bool
  var webhookUrl: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationRequest? {
    let appId = pigeonVar_list[0] as! String
    let providerId = pigeonVar_list[1] as! String
    let secret = pigeonVar_list[2] as! String
    let signature = pigeonVar_list[3] as! String
    let timestamp: String? = nilOrValue(pigeonVar_list[4])
    let context = pigeonVar_list[5] as! String
    let sessionId = pigeonVar_list[6] as! String
    let parameters = pigeonVar_list[7] as! [String: String]
    let autoSubmit = pigeonVar_list[8] as! Bool
    let acceptAiProviders = pigeonVar_list[9] as! Bool
    let webhookUrl: String? = nilOrValue(pigeonVar_list[10])

    return ReclaimApiVerificationRequest(
      appId: appId,
      providerId: providerId,
      secret: secret,
      signature: signature,
      timestamp: timestamp,
      context: context,
      sessionId: sessionId,
      parameters: parameters,
      autoSubmit: autoSubmit,
      acceptAiProviders: acceptAiProviders,
      webhookUrl: webhookUrl
    )
  }
  func toList() -> [Any?] {
    return [
      appId,
      providerId,
      secret,
      signature,
      timestamp,
      context,
      sessionId,
      parameters,
      autoSubmit,
      acceptAiProviders,
      webhookUrl,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationException {
  var message: String
  var stackTraceAsString: String
  var type: ReclaimApiVerificationExceptionType


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationException? {
    let message = pigeonVar_list[0] as! String
    let stackTraceAsString = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! ReclaimApiVerificationExceptionType

    return ReclaimApiVerificationException(
      message: message,
      stackTraceAsString: stackTraceAsString,
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      message,
      stackTraceAsString,
      type,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationResponse {
  var sessionId: String
  var didSubmitManualVerification: Bool
  var proofs: [[String: Sendable?]]
  var exception: ReclaimApiVerificationException? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationResponse? {
    let sessionId = pigeonVar_list[0] as! String
    let didSubmitManualVerification = pigeonVar_list[1] as! Bool
    let proofs = pigeonVar_list[2] as! [[String: Sendable?]]
    let exception: ReclaimApiVerificationException? = nilOrValue(pigeonVar_list[3])

    return ReclaimApiVerificationResponse(
      sessionId: sessionId,
      didSubmitManualVerification: didSubmitManualVerification,
      proofs: proofs,
      exception: exception
    )
  }
  func toList() -> [Any?] {
    return [
      sessionId,
      didSubmitManualVerification,
      proofs,
      exception,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientProviderInformationOverride {
  var providerInformationUrl: String? = nil
  var providerInformationJsonString: String? = nil
  var canFetchProviderInformationFromHost: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientProviderInformationOverride? {
    let providerInformationUrl: String? = nilOrValue(pigeonVar_list[0])
    let providerInformationJsonString: String? = nilOrValue(pigeonVar_list[1])
    let canFetchProviderInformationFromHost = pigeonVar_list[2] as! Bool

    return ClientProviderInformationOverride(
      providerInformationUrl: providerInformationUrl,
      providerInformationJsonString: providerInformationJsonString,
      canFetchProviderInformationFromHost: canFetchProviderInformationFromHost
    )
  }
  func toList() -> [Any?] {
    return [
      providerInformationUrl,
      providerInformationJsonString,
      canFetchProviderInformationFromHost,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientFeatureOverrides {
  var cookiePersist: Bool? = nil
  var singleReclaimRequest: Bool? = nil
  var idleTimeThresholdForManualVerificationTrigger: Int64? = nil
  var sessionTimeoutForManualVerificationTrigger: Int64? = nil
  var attestorBrowserRpcUrl: String? = nil
  var isAIFlowEnabled: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientFeatureOverrides? {
    let cookiePersist: Bool? = nilOrValue(pigeonVar_list[0])
    let singleReclaimRequest: Bool? = nilOrValue(pigeonVar_list[1])
    let idleTimeThresholdForManualVerificationTrigger: Int64? = nilOrValue(pigeonVar_list[2])
    let sessionTimeoutForManualVerificationTrigger: Int64? = nilOrValue(pigeonVar_list[3])
    let attestorBrowserRpcUrl: String? = nilOrValue(pigeonVar_list[4])
    let isAIFlowEnabled: Bool? = nilOrValue(pigeonVar_list[5])

    return ClientFeatureOverrides(
      cookiePersist: cookiePersist,
      singleReclaimRequest: singleReclaimRequest,
      idleTimeThresholdForManualVerificationTrigger: idleTimeThresholdForManualVerificationTrigger,
      sessionTimeoutForManualVerificationTrigger: sessionTimeoutForManualVerificationTrigger,
      attestorBrowserRpcUrl: attestorBrowserRpcUrl,
      isAIFlowEnabled: isAIFlowEnabled
    )
  }
  func toList() -> [Any?] {
    return [
      cookiePersist,
      singleReclaimRequest,
      idleTimeThresholdForManualVerificationTrigger,
      sessionTimeoutForManualVerificationTrigger,
      attestorBrowserRpcUrl,
      isAIFlowEnabled,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientLogConsumerOverride {
  var enableLogHandler: Bool
  var canSdkCollectTelemetry: Bool
  var canSdkPrintLogs: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientLogConsumerOverride? {
    let enableLogHandler = pigeonVar_list[0] as! Bool
    let canSdkCollectTelemetry = pigeonVar_list[1] as! Bool
    let canSdkPrintLogs: Bool? = nilOrValue(pigeonVar_list[2])

    return ClientLogConsumerOverride(
      enableLogHandler: enableLogHandler,
      canSdkCollectTelemetry: canSdkCollectTelemetry,
      canSdkPrintLogs: canSdkPrintLogs
    )
  }
  func toList() -> [Any?] {
    return [
      enableLogHandler,
      canSdkCollectTelemetry,
      canSdkPrintLogs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientReclaimSessionManagementOverride {
  var enableSdkSessionManagement: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientReclaimSessionManagementOverride? {
    let enableSdkSessionManagement = pigeonVar_list[0] as! Bool

    return ClientReclaimSessionManagementOverride(
      enableSdkSessionManagement: enableSdkSessionManagement
    )
  }
  func toList() -> [Any?] {
    return [
      enableSdkSessionManagement
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientReclaimAppInfoOverride {
  var appName: String
  var appImageUrl: String
  var isRecurring: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientReclaimAppInfoOverride? {
    let appName = pigeonVar_list[0] as! String
    let appImageUrl = pigeonVar_list[1] as! String
    let isRecurring = pigeonVar_list[2] as! Bool

    return ClientReclaimAppInfoOverride(
      appName: appName,
      appImageUrl: appImageUrl,
      isRecurring: isRecurring
    )
  }
  func toList() -> [Any?] {
    return [
      appName,
      appImageUrl,
      isRecurring,
    ]
  }
}

/// Identification information of a session.
///
/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimSessionIdentityUpdate {
  /// The application id.
  var appId: String
  /// The provider id.
  var providerId: String
  /// The session id.
  var sessionId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimSessionIdentityUpdate? {
    let appId = pigeonVar_list[0] as! String
    let providerId = pigeonVar_list[1] as! String
    let sessionId = pigeonVar_list[2] as! String

    return ReclaimSessionIdentityUpdate(
      appId: appId,
      providerId: providerId,
      sessionId: sessionId
    )
  }
  func toList() -> [Any?] {
    return [
      appId,
      providerId,
      sessionId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationOptions {
  /// Whether to delete cookies before user journey starts in the client web view.
  /// Defaults to true.
  var canDeleteCookiesBeforeVerificationStarts: Bool
  /// Whether module can use a callback to host that returns an authentication request when a Reclaim HTTP provider is provided.
  /// Defaults to false.
  /// {@macro CreateClaimOptions.attestorAuthenticationRequest}
  var canUseAttestorAuthenticationRequest: Bool


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationOptions? {
    let canDeleteCookiesBeforeVerificationStarts = pigeonVar_list[0] as! Bool
    let canUseAttestorAuthenticationRequest = pigeonVar_list[1] as! Bool

    return ReclaimApiVerificationOptions(
      canDeleteCookiesBeforeVerificationStarts: canDeleteCookiesBeforeVerificationStarts,
      canUseAttestorAuthenticationRequest: canUseAttestorAuthenticationRequest
    )
  }
  func toList() -> [Any?] {
    return [
      canDeleteCookiesBeforeVerificationStarts,
      canUseAttestorAuthenticationRequest,
    ]
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ReclaimApiVerificationExceptionType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ReclaimSessionStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return ReclaimApiVerificationRequest.fromList(self.readValue() as! [Any?])
    case 132:
      return ReclaimApiVerificationException.fromList(self.readValue() as! [Any?])
    case 133:
      return ReclaimApiVerificationResponse.fromList(self.readValue() as! [Any?])
    case 134:
      return ClientProviderInformationOverride.fromList(self.readValue() as! [Any?])
    case 135:
      return ClientFeatureOverrides.fromList(self.readValue() as! [Any?])
    case 136:
      return ClientLogConsumerOverride.fromList(self.readValue() as! [Any?])
    case 137:
      return ClientReclaimSessionManagementOverride.fromList(self.readValue() as! [Any?])
    case 138:
      return ClientReclaimAppInfoOverride.fromList(self.readValue() as! [Any?])
    case 139:
      return ReclaimSessionIdentityUpdate.fromList(self.readValue() as! [Any?])
    case 140:
      return ReclaimApiVerificationOptions.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ReclaimApiVerificationExceptionType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ReclaimSessionStatus {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? ReclaimApiVerificationRequest {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimApiVerificationException {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimApiVerificationResponse {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ClientProviderInformationOverride {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? ClientFeatureOverrides {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? ClientLogConsumerOverride {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? ClientReclaimSessionManagementOverride {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? ClientReclaimAppInfoOverride {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimSessionIdentityUpdate {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimApiVerificationOptions {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Apis implemented by the Reclaim module for use by the host.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ReclaimModuleApiProtocol {
  func startVerification(request requestArg: ReclaimApiVerificationRequest, completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void)
  func startVerificationFromUrl(url urlArg: String, completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void)
  func setOverrides(provider providerArg: ClientProviderInformationOverride?, feature featureArg: ClientFeatureOverrides?, logConsumer logConsumerArg: ClientLogConsumerOverride?, sessionManagement sessionManagementArg: ClientReclaimSessionManagementOverride?, appInfo appInfoArg: ClientReclaimAppInfoOverride?, capabilityAccessToken capabilityAccessTokenArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func clearAllOverrides(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func setVerificationOptions(options optionsArg: ReclaimApiVerificationOptions?, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func ping(completion: @escaping (Result<Bool, PigeonError>) -> Void)
}
class ReclaimModuleApi: ReclaimModuleApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func startVerification(request requestArg: ReclaimApiVerificationRequest, completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerification\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! ReclaimApiVerificationResponse
        completion(.success(result))
      }
    }
  }
  func startVerificationFromUrl(url urlArg: String, completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromUrl\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([urlArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! ReclaimApiVerificationResponse
        completion(.success(result))
      }
    }
  }
  func setOverrides(provider providerArg: ClientProviderInformationOverride?, feature featureArg: ClientFeatureOverrides?, logConsumer logConsumerArg: ClientLogConsumerOverride?, sessionManagement sessionManagementArg: ClientReclaimSessionManagementOverride?, appInfo appInfoArg: ClientReclaimAppInfoOverride?, capabilityAccessToken capabilityAccessTokenArg: String?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setOverrides\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([providerArg, featureArg, logConsumerArg, sessionManagementArg, appInfoArg, capabilityAccessTokenArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func clearAllOverrides(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.clearAllOverrides\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func setVerificationOptions(options optionsArg: ReclaimApiVerificationOptions?, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setVerificationOptions\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([optionsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func ping(completion: @escaping (Result<Bool, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.ping\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! Bool
        completion(.success(result))
      }
    }
  }
}
/// Apis implemented by the host using the Reclaim module.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ReclaimHostOverridesApi {
  func onLogs(logJsonString: String, completion: @escaping (Result<Void, Error>) -> Void)
  func createSession(appId: String, providerId: String, sessionId: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func updateSession(sessionId: String, status: ReclaimSessionStatus, completion: @escaping (Result<Bool, Error>) -> Void)
  func logSession(appId: String, providerId: String, sessionId: String, logType: String, completion: @escaping (Result<Void, Error>) -> Void)
  func onSessionIdentityUpdate(update: ReclaimSessionIdentityUpdate?, completion: @escaping (Result<Void, Error>) -> Void)
  func fetchProviderInformation(appId: String, providerId: String, sessionId: String, signature: String, timestamp: String, completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ReclaimHostOverridesApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `ReclaimHostOverridesApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ReclaimHostOverridesApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let onLogsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.onLogs\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onLogsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let logJsonStringArg = args[0] as! String
        api.onLogs(logJsonString: logJsonStringArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      onLogsChannel.setMessageHandler(nil)
    }
    let createSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.createSession\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let providerIdArg = args[1] as! String
        let sessionIdArg = args[2] as! String
        api.createSession(appId: appIdArg, providerId: providerIdArg, sessionId: sessionIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createSessionChannel.setMessageHandler(nil)
    }
    let updateSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.updateSession\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let sessionIdArg = args[0] as! String
        let statusArg = args[1] as! ReclaimSessionStatus
        api.updateSession(sessionId: sessionIdArg, status: statusArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateSessionChannel.setMessageHandler(nil)
    }
    let logSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.logSession\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let providerIdArg = args[1] as! String
        let sessionIdArg = args[2] as! String
        let logTypeArg = args[3] as! String
        api.logSession(appId: appIdArg, providerId: providerIdArg, sessionId: sessionIdArg, logType: logTypeArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      logSessionChannel.setMessageHandler(nil)
    }
    let onSessionIdentityUpdateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.onSessionIdentityUpdate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onSessionIdentityUpdateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let updateArg: ReclaimSessionIdentityUpdate? = nilOrValue(args[0])
        api.onSessionIdentityUpdate(update: updateArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      onSessionIdentityUpdateChannel.setMessageHandler(nil)
    }
    let fetchProviderInformationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.fetchProviderInformation\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchProviderInformationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let providerIdArg = args[1] as! String
        let sessionIdArg = args[2] as! String
        let signatureArg = args[3] as! String
        let timestampArg = args[4] as! String
        api.fetchProviderInformation(appId: appIdArg, providerId: providerIdArg, sessionId: sessionIdArg, signature: signatureArg, timestamp: timestampArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchProviderInformationChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ReclaimHostVerificationApi {
  func fetchAttestorAuthenticationRequest(reclaimHttpProvider: [AnyHashable?: Sendable?], completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ReclaimHostVerificationApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `ReclaimHostVerificationApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ReclaimHostVerificationApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let fetchAttestorAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostVerificationApi.fetchAttestorAuthenticationRequest\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchAttestorAuthenticationRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let reclaimHttpProviderArg = args[0] as! [AnyHashable: Sendable?]
        api.fetchAttestorAuthenticationRequest(reclaimHttpProvider: reclaimHttpProviderArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchAttestorAuthenticationRequestChannel.setMessageHandler(nil)
    }
  }
}
