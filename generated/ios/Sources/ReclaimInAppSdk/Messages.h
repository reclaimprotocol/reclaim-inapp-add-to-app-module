// Copyright 2025, Reclaim Protocol. Use of this source code is governed by a license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, ReclaimApiVerificationExceptionType) {
  ReclaimApiVerificationExceptionTypeUnknown = 0,
  ReclaimApiVerificationExceptionTypeSessionExpired = 1,
  ReclaimApiVerificationExceptionTypeVerificationDismissed = 2,
  ReclaimApiVerificationExceptionTypeVerificationFailed = 3,
  ReclaimApiVerificationExceptionTypeVerificationCancelled = 4,
};

/// Wrapper for ReclaimApiVerificationExceptionType to allow for nullability.
@interface ReclaimApiVerificationExceptionTypeBox : NSObject
@property(nonatomic, assign) ReclaimApiVerificationExceptionType value;
- (instancetype)initWithValue:(ReclaimApiVerificationExceptionType)value;
@end

typedef NS_ENUM(NSUInteger, ReclaimSessionStatus) {
  ReclaimSessionStatusUSER_STARTED_VERIFICATION = 0,
  ReclaimSessionStatusUSER_INIT_VERIFICATION = 1,
  ReclaimSessionStatusPROOF_GENERATION_STARTED = 2,
  ReclaimSessionStatusPROOF_GENERATION_RETRY = 3,
  ReclaimSessionStatusPROOF_GENERATION_SUCCESS = 4,
  ReclaimSessionStatusPROOF_GENERATION_FAILED = 5,
  ReclaimSessionStatusPROOF_SUBMITTED = 6,
  ReclaimSessionStatusPROOF_SUBMISSION_FAILED = 7,
  ReclaimSessionStatusPROOF_MANUAL_VERIFICATION_SUBMITTED = 8,
};

/// Wrapper for ReclaimSessionStatus to allow for nullability.
@interface ReclaimSessionStatusBox : NSObject
@property(nonatomic, assign) ReclaimSessionStatus value;
- (instancetype)initWithValue:(ReclaimSessionStatus)value;
@end

typedef NS_ENUM(NSUInteger, ClaimCreationTypeApi) {
  ClaimCreationTypeApiStandalone = 0,
  ClaimCreationTypeApiMeChain = 1,
};

/// Wrapper for ClaimCreationTypeApi to allow for nullability.
@interface ClaimCreationTypeApiBox : NSObject
@property(nonatomic, assign) ClaimCreationTypeApi value;
- (instancetype)initWithValue:(ClaimCreationTypeApi)value;
@end

@class ReclaimApiVerificationRequest;
@class ReclaimApiVerificationException;
@class ReclaimApiVerificationResponse;
@class ClientProviderInformationOverride;
@class ClientFeatureOverrides;
@class ClientLogConsumerOverride;
@class ClientReclaimSessionManagementOverride;
@class ClientReclaimAppInfoOverride;
@class ReclaimSessionIdentityUpdate;
@class ReclaimApiVerificationOptions;

@interface ReclaimApiVerificationRequest : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAppId:(NSString *)appId
    providerId:(NSString *)providerId
    secret:(NSString *)secret
    signature:(NSString *)signature
    timestamp:(nullable NSString *)timestamp
    context:(NSString *)context
    sessionId:(NSString *)sessionId
    parameters:(NSDictionary<NSString *, NSString *> *)parameters
    acceptAiProviders:(BOOL )acceptAiProviders
    webhookUrl:(nullable NSString *)webhookUrl;
@property(nonatomic, copy) NSString * appId;
@property(nonatomic, copy) NSString * providerId;
@property(nonatomic, copy) NSString * secret;
@property(nonatomic, copy) NSString * signature;
@property(nonatomic, copy, nullable) NSString * timestamp;
@property(nonatomic, copy) NSString * context;
@property(nonatomic, copy) NSString * sessionId;
@property(nonatomic, copy) NSDictionary<NSString *, NSString *> * parameters;
@property(nonatomic, assign) BOOL  acceptAiProviders;
@property(nonatomic, copy, nullable) NSString * webhookUrl;
@end

@interface ReclaimApiVerificationException : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithMessage:(NSString *)message
    stackTraceAsString:(NSString *)stackTraceAsString
    type:(ReclaimApiVerificationExceptionType)type;
@property(nonatomic, copy) NSString * message;
@property(nonatomic, copy) NSString * stackTraceAsString;
@property(nonatomic, assign) ReclaimApiVerificationExceptionType type;
@end

@interface ReclaimApiVerificationResponse : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSessionId:(NSString *)sessionId
    didSubmitManualVerification:(BOOL )didSubmitManualVerification
    proofs:(NSArray<NSDictionary<NSString *, dynamic *> *> *)proofs
    exception:(nullable ReclaimApiVerificationException *)exception;
@property(nonatomic, copy) NSString * sessionId;
@property(nonatomic, assign) BOOL  didSubmitManualVerification;
@property(nonatomic, copy) NSArray<NSDictionary<NSString *, dynamic *> *> * proofs;
@property(nonatomic, strong, nullable) ReclaimApiVerificationException * exception;
@end

@interface ClientProviderInformationOverride : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithProviderInformationUrl:(nullable NSString *)providerInformationUrl
    providerInformationJsonString:(nullable NSString *)providerInformationJsonString
    canFetchProviderInformationFromHost:(BOOL )canFetchProviderInformationFromHost;
@property(nonatomic, copy, nullable) NSString * providerInformationUrl;
@property(nonatomic, copy, nullable) NSString * providerInformationJsonString;
@property(nonatomic, assign) BOOL  canFetchProviderInformationFromHost;
@end

@interface ClientFeatureOverrides : NSObject
+ (instancetype)makeWithCookiePersist:(nullable NSNumber *)cookiePersist
    singleReclaimRequest:(nullable NSNumber *)singleReclaimRequest
    idleTimeThresholdForManualVerificationTrigger:(nullable NSNumber *)idleTimeThresholdForManualVerificationTrigger
    sessionTimeoutForManualVerificationTrigger:(nullable NSNumber *)sessionTimeoutForManualVerificationTrigger
    attestorBrowserRpcUrl:(nullable NSString *)attestorBrowserRpcUrl
    isAIFlowEnabled:(nullable NSNumber *)isAIFlowEnabled;
@property(nonatomic, strong, nullable) NSNumber * cookiePersist;
@property(nonatomic, strong, nullable) NSNumber * singleReclaimRequest;
@property(nonatomic, strong, nullable) NSNumber * idleTimeThresholdForManualVerificationTrigger;
@property(nonatomic, strong, nullable) NSNumber * sessionTimeoutForManualVerificationTrigger;
@property(nonatomic, copy, nullable) NSString * attestorBrowserRpcUrl;
@property(nonatomic, strong, nullable) NSNumber * isAIFlowEnabled;
@end

@interface ClientLogConsumerOverride : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithEnableLogHandler:(BOOL )enableLogHandler
    canSdkCollectTelemetry:(BOOL )canSdkCollectTelemetry
    canSdkPrintLogs:(nullable NSNumber *)canSdkPrintLogs;
@property(nonatomic, assign) BOOL  enableLogHandler;
@property(nonatomic, assign) BOOL  canSdkCollectTelemetry;
@property(nonatomic, strong, nullable) NSNumber * canSdkPrintLogs;
@end

@interface ClientReclaimSessionManagementOverride : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithEnableSdkSessionManagement:(BOOL )enableSdkSessionManagement;
@property(nonatomic, assign) BOOL  enableSdkSessionManagement;
@end

@interface ClientReclaimAppInfoOverride : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAppName:(NSString *)appName
    appImageUrl:(NSString *)appImageUrl
    isRecurring:(BOOL )isRecurring;
@property(nonatomic, copy) NSString * appName;
@property(nonatomic, copy) NSString * appImageUrl;
@property(nonatomic, assign) BOOL  isRecurring;
@end

/// Identification information of a session.
@interface ReclaimSessionIdentityUpdate : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAppId:(NSString *)appId
    providerId:(NSString *)providerId
    sessionId:(NSString *)sessionId;
/// The application id.
@property(nonatomic, copy) NSString * appId;
/// The provider id.
@property(nonatomic, copy) NSString * providerId;
/// The session id.
@property(nonatomic, copy) NSString * sessionId;
@end

@interface ReclaimApiVerificationOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithCanDeleteCookiesBeforeVerificationStarts:(BOOL )canDeleteCookiesBeforeVerificationStarts
    canUseAttestorAuthenticationRequest:(BOOL )canUseAttestorAuthenticationRequest
    claimCreationType:(ClaimCreationTypeApi)claimCreationType
    canAutoSubmit:(BOOL )canAutoSubmit
    isCloseButtonVisible:(BOOL )isCloseButtonVisible;
/// Whether to delete cookies before user journey starts in the client web view.
/// Defaults to true.
@property(nonatomic, assign) BOOL  canDeleteCookiesBeforeVerificationStarts;
/// Whether module can use a callback to host that returns an authentication request when a Reclaim HTTP provider is provided.
/// Defaults to false.
/// {@macro CreateClaimOptions.attestorAuthenticationRequest}
@property(nonatomic, assign) BOOL  canUseAttestorAuthenticationRequest;
@property(nonatomic, assign) ClaimCreationTypeApi claimCreationType;
/// Whether module can auto submit the claim.
/// Defaults to true.
@property(nonatomic, assign) BOOL  canAutoSubmit;
/// Whether the close button is visible.
/// Defaults to true.
@property(nonatomic, assign) BOOL  isCloseButtonVisible;
@end

/// The codec used by all APIs.
NSObject<FlutterMessageCodec> *nullGetMessagesCodec(void);

/// Apis implemented by the Reclaim module for use by the host.
@interface ReclaimModuleApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger messageChannelSuffix:(nullable NSString *)messageChannelSuffix;
- (void)startVerificationRequest:(ReclaimApiVerificationRequest *)request completion:(void (^)(ReclaimApiVerificationResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)startVerificationFromUrlUrl:(NSString *)url completion:(void (^)(ReclaimApiVerificationResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)setOverridesProvider:(nullable ClientProviderInformationOverride *)provider feature:(nullable ClientFeatureOverrides *)feature logConsumer:(nullable ClientLogConsumerOverride *)logConsumer sessionManagement:(nullable ClientReclaimSessionManagementOverride *)sessionManagement appInfo:(nullable ClientReclaimAppInfoOverride *)appInfo capabilityAccessToken:(nullable NSString *)capabilityAccessToken completion:(void (^)(FlutterError *_Nullable))completion;
- (void)clearAllOverridesWithCompletion:(void (^)(FlutterError *_Nullable))completion;
- (void)setVerificationOptionsOptions:(nullable ReclaimApiVerificationOptions *)options completion:(void (^)(FlutterError *_Nullable))completion;
- (void)pingWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
@end


/// Apis implemented by the host using the Reclaim module.
@protocol ReclaimHostOverridesApi
- (void)onLogsLogJsonString:(NSString *)logJsonString completion:(void (^)(FlutterError *_Nullable))completion;
- (void)createSessionAppId:(NSString *)appId providerId:(NSString *)providerId timestamp:(NSString *)timestamp signature:(NSString *)signature completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)updateSessionSessionId:(NSString *)sessionId status:(ReclaimSessionStatus)status completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)logSessionAppId:(NSString *)appId providerId:(NSString *)providerId sessionId:(NSString *)sessionId logType:(NSString *)logType metadata:(nullable NSDictionary<NSString *, dynamic *> *)metadata completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onSessionIdentityUpdateUpdate:(nullable ReclaimSessionIdentityUpdate *)update completion:(void (^)(FlutterError *_Nullable))completion;
- (void)fetchProviderInformationAppId:(NSString *)appId providerId:(NSString *)providerId sessionId:(NSString *)sessionId signature:(NSString *)signature timestamp:(NSString *)timestamp completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpReclaimHostOverridesApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReclaimHostOverridesApi> *_Nullable api);

extern void SetUpReclaimHostOverridesApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReclaimHostOverridesApi> *_Nullable api, NSString *messageChannelSuffix);


@protocol ReclaimHostVerificationApi
- (void)fetchAttestorAuthenticationRequestReclaimHttpProvider:(NSDictionary<dynamic *, dynamic *> *)reclaimHttpProvider completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpReclaimHostVerificationApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReclaimHostVerificationApi> *_Nullable api);

extern void SetUpReclaimHostVerificationApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReclaimHostVerificationApi> *_Nullable api, NSString *messageChannelSuffix);

NS_ASSUME_NONNULL_END
