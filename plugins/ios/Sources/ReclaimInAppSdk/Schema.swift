// Copyright 2025, Reclaim Protocol. Use of this source code is governed by a license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v22.7.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ReclaimApiVerificationExceptionType: Int {
  case unknown = 0
  case sessionExpired = 1
  case verificationDismissed = 2
  case verificationFailed = 3
  case verificationCancelled = 4
}

/// Generated class from Pigeon that represents data sent in messages.
public struct ReclaimApiVerificationRequest {
  var appId: String
  var providerId: String
  var secret: String
  var signature: String = ""
  var timestamp: String? = nil
  var context: String
  var sessionId: String = ""
  var parameters: [String: String]
  var hideLanding: Bool = true
  var autoSubmit: Bool = false
  var acceptAiProviders: Bool = false
  var webhookUrl: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationRequest? {
    let appId = pigeonVar_list[0] as! String
    let providerId = pigeonVar_list[1] as! String
    let secret = pigeonVar_list[2] as! String
    let signature = pigeonVar_list[3] as! String
    let timestamp: String? = nilOrValue(pigeonVar_list[4])
    let context = pigeonVar_list[5] as! String
    let sessionId = pigeonVar_list[6] as! String
    let parameters = pigeonVar_list[7] as! [String: String]
    let hideLanding = pigeonVar_list[8] as! Bool
    let autoSubmit = pigeonVar_list[9] as! Bool
    let acceptAiProviders = pigeonVar_list[10] as! Bool
    let webhookUrl: String? = nilOrValue(pigeonVar_list[11])

    return ReclaimApiVerificationRequest(
      appId: appId,
      providerId: providerId,
      secret: secret,
      signature: signature,
      timestamp: timestamp,
      context: context,
      sessionId: sessionId,
      parameters: parameters,
      hideLanding: hideLanding,
      autoSubmit: autoSubmit,
      acceptAiProviders: acceptAiProviders,
      webhookUrl: webhookUrl
    )
  }
  func toList() -> [Any?] {
    return [
      appId,
      providerId,
      secret,
      signature,
      timestamp,
      context,
      sessionId,
      parameters,
      hideLanding,
      autoSubmit,
      acceptAiProviders,
      webhookUrl,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationException {
  var message: String
  var stackTraceAsString: String
  var type: ReclaimApiVerificationExceptionType


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationException? {
    let message = pigeonVar_list[0] as! String
    let stackTraceAsString = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! ReclaimApiVerificationExceptionType

    return ReclaimApiVerificationException(
      message: message,
      stackTraceAsString: stackTraceAsString,
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      message,
      stackTraceAsString,
      type,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
public struct ReclaimApiVerificationResponse {
  var sessionId: String
  var didSubmitManualVerification: Bool
  var proofs: [[String: Any?]]
  var exception: ReclaimApiVerificationException? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationResponse? {
    let sessionId = pigeonVar_list[0] as! String
    let didSubmitManualVerification = pigeonVar_list[1] as! Bool
    let proofs = pigeonVar_list[2] as! [[String: Any?]]
    let exception: ReclaimApiVerificationException? = nilOrValue(pigeonVar_list[3])

    return ReclaimApiVerificationResponse(
      sessionId: sessionId,
      didSubmitManualVerification: didSubmitManualVerification,
      proofs: proofs,
      exception: exception
    )
  }
  func toList() -> [Any?] {
    return [
      sessionId,
      didSubmitManualVerification,
      proofs,
      exception,
    ]
  }
}

private class SchemaPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ReclaimApiVerificationExceptionType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return ReclaimApiVerificationRequest.fromList(self.readValue() as! [Any?])
    case 131:
      return ReclaimApiVerificationException.fromList(self.readValue() as! [Any?])
    case 132:
      return ReclaimApiVerificationResponse.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class SchemaPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ReclaimApiVerificationExceptionType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ReclaimApiVerificationRequest {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimApiVerificationException {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimApiVerificationResponse {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SchemaPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SchemaPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SchemaPigeonCodecWriter(data: data)
  }
}

class SchemaPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = SchemaPigeonCodec(readerWriter: SchemaPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ReclaimModuleApiProtocol {
  func startVerification(request requestArg: ReclaimApiVerificationRequest, completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void)
  func startVerificationFromUrl(url urlArg: String, completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void)
  func ping(completion: @escaping (Result<Bool, PigeonError>) -> Void)
}
class ReclaimModuleApi: ReclaimModuleApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: SchemaPigeonCodec {
    return SchemaPigeonCodec.shared
  }
  func startVerification(request requestArg: ReclaimApiVerificationRequest, completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerification\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! ReclaimApiVerificationResponse
        completion(.success(result))
      }
    }
  }
  func startVerificationFromUrl(url urlArg: String, completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromUrl\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([urlArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! ReclaimApiVerificationResponse
        completion(.success(result))
      }
    }
  }
  func ping(completion: @escaping (Result<Bool, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.ping\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! Bool
        completion(.success(result))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ReclaimApi {
  func ping(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ReclaimApiSetup {
  static var codec: FlutterStandardMessageCodec { SchemaPigeonCodec.shared }
  /// Sets up an instance of `ReclaimApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ReclaimApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let pingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.reclaim_verifier_module.ReclaimApi.ping\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pingChannel.setMessageHandler { _, reply in
        api.ping { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      pingChannel.setMessageHandler(nil)
    }
  }
}
